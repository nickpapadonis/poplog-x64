#!/bin/bash

# Internal system level language builds the dialog of POP as
# a meta-compiler to build final POP.
#
# There are assembly files written in the target system language
# to implement the core functionality that interfaces to the target 
# system.  This includes stack maniupulation, frame and garbage
# collection.  Produce the assembler files with this meta POP dialect
# then use the linker and assembler on the platform to create executables.

# 1. Use corepop and files in src/syscomp to create 'popc', 'poplink' and 'poplibr'
# 2. Use 'popc' to compile files in src/
# 3. Link new poplog using 'poplink' and 'poplibr', this needs support code from
#    'extern/lib'
# 4. Build running images
#
# After 3) you may go to 1) if you want to modify how tools used
# in build work.

build_core=true
build_x=false
build_arg_err=false
for arg in "$@"
do
    if [ "$arg" == "compl" ]; then
        build_compl=true
    elif [ "$arg" == "core" ]; then
        build_core=true
    elif [ "$arg" == "x" ]; then
        build_x=true
    else
        if [ $# -gt 0 ]; then
            build_arg_err=true
        fi
    fi
done

if $build_arg_err; then
    echo "$0 [core|compl] [x]"
    exit 1
fi

source ./popenv-build

# prevent local files being found and compiled
mv $poplocal/local $poplocal/local.temp

ls -l $poplocal/local.temp

if true ; then
cd $popsys

pwd
echo "rebuilding system images"

$popsrc/mksyscomp -d popc poplibr poplink

ls -l *.psv

ln -s corepop popc
ln -s corepop poplibr
ln -s corepop poplink

fi

if true ; then
cd $popexternlib
pwd

echo "mklibpop"
./mklibpop

cd $popcom
pwd

# below may not work
#echo "mkXpm"
if $build_x; then
    #./mkXpm -I/usr/lib64
    ./mkXpm -I/usr/lib/x86_64-linux-gnu/
fi

cd $usepop/pop/obj
    pwd
    echo 'saving library files in old'
    mkdir old
    ls -l
    mv *.* old
fi

echo 'Recompiling base system'
cd $usepop/pop/src
    pwd
    echo 'pgcomp'
    pgcomp *.[ps]

    echo 'pglibr'
    pglibr -c ../obj/src.wlb *.w
#    rm *.[ow]
echo 'After recompilation'

if true ; then
cd $usepop/pop/ved/src/
    pwd
    echo 'pgcomp'
    pgcomp *.[ps]
    echo 'pglibr'
    time pglibr -c ../../obj/vedsrc.wlb *.w
    rm *.[ow]

if $build_x; then
    cd $usepop/pop/x/src/
        pwd
        echo 'pgcomp'
        pgcomp *.[ps]
        echo 'pglibr'
        pglibr -c ../../obj/xsrc.wlb *.w
        rm *.[ow]
fi

fi
# link a complete system into a newpop11 image, using pglink
echo " -----------------------------------------------"
echo "link a complete system into a newpop11 image, using pglink"
echo " -----------------------------------------------"
cd $popsys

if $build_core; then
    echo "Linking Core Libraries"
    pglink -core
fi

if $build_compl; then
    echo "Linking Complete Libraries"
    pglink
fi

ls -l newpop11
# newpop11 basepop11
./corepop %nort ../lib/lib/mkimage.p -entrymain ./newpop.psv ../lib/lib/newpop.p

mv $poplocal/local.temp $poplocal/local

ls -l $poplocal/local

# X library errors below
$popcom/mkstartup

mv $popsys/newpop11 $popsrc/pop11

rm $popsys/clisp $popsys/doc $popsys/help $popsys/im $popsys/oldpop11 $popsys/pml $popsys/prolog $popsys/ref $popsys/teach $popsys/ved $popsys/ved $popsys/xved 2>/dev/null
ln -s $popsrc/pop11 $popsys/basepop11 2&>/dev/null
ln -s $popsys/basepop11 $popsys/clisp 2&>/dev/null
ln -s $popsys/basepop11 $popsys/doc 2&>/dev/null
ln -s $popsys/basepop11 $popsys/help 2&>/dev/null
ln -s $popsys/basepop11 $popsys/im 2&>/dev/null
ln -s $popsys/basepop11 $popsys/oldpop11 2&>/dev/null
ln -s $popsys/basepop11 $popsys/pml 2&>/dev/null
ln -s $popsys/basepop11 $popsys/prolog 2&>/dev/null
ln -s $popsys/basepop11 $popsys/ref 2&>/dev/null
ln -s $popsys/basepop11 $popsys/teach 2&>/dev/null
ln -s $popsys/basepop11 $popsys/ved 2&>/dev/null
ln -s $popsys/basepop11 $popsys/xved 2&>/dev/null

# If no X
#$usepop/pop/src/newpop -link -norsv
# If X
$usepop/pop/src/newpop -link -x=-xm -norsv

### The following are done by the base command
$popcom/mkstartup
$popcom/mkplog
$popcom/mkclisp
$popcom/mkpml
$popcom/mkxved
